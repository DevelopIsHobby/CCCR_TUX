name: Build test deploy
on: workflow_dispatch
  # pull-request:
  #   brances:
  #     - main

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_REPO: mskim6518/argocd-k8s
  VERSION : 0.0.3
      
jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17

      - name: Copy Secret variable
        env:
          ENV_SECRET: ${{ secrets.ENV_SECRET }}
          ENV_SECRET_DIR: src/main/resources
          ENV_SECRET_DIR_FILE_NAME: .env
        run:
          echo $ENV_SECRET | base64 --decode > $ENV_SECRET_DIR/$ENV_SECRET_DIR_FILE_NAME

      - name: Grant execute permission for gradlew
        run : chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Log in to Docker hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: server image build and docker hub push
        id: build_and_push_server 
        run: |
           docker build --platform linux/arm64 -f Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_REPO }}:weather-${{ env.VERSION }}-${{ github.run_number }} .
           docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_REPO }}/minjung:weather-${{ env.VERSION }}-${{ github.run_number }}
          
        #ssh
      - name: Network ssh
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPN_URL }}
          username: ${{ secrets.VPN_USER }}
          password: ${{ secrets.VPN_PASSWORD }}
          port: ${{ secrets.VPN_PORT }}
          script: |
                docker images
                docker ps -a
                echo "hello, docker"
            
      # sudo docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_REPO }}/minjung:weather-${{ env.VERSION }}-${{ github.run_number }}
            
      
      
      #   #scp
      # - name: scp working
      #   uses: appleboy/scp-action@v0.1.7
      #   with:
      #     host: ${{ secrets.VPN_URL }} 
      #     username: ${{ secrets.VPN_USER }}
      #     password: ${{ secrets.VPN_PASSWORD }}
      #     port: ${{ secrets.VPN_PORT }}
      #     source: "test/a.txt"
      #     target: /home/user/test

        # MUST ADD GRADLE
      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     SERVICE_TAG: . # Dockerfile의 경로
      #     # IMAGE_TAG: ${{ github.sha }} # Github가 제공하는 SHA 암호화 사용
      #   run: |
      #     # Build a docker container and
      #     # push it to ECR so that it can
      #     # be deployed to ECS.
      #     docker build -t TEST/TEST:latest $SERVICE_TAG
      #     docker push TEST/TEST:latest
      #     # 여기에서 사용한 output(name = image)을 아래에서 사용
      #     # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      #     # MUST ADD DEPLOY PART



